import React, { useState } from 'react';
import { ChevronRight, ChevronLeft, Sparkles, User, Mail, Phone, GraduationCap, Target, Lightbulb, Briefcase } from 'lucide-react';

export default function CareerBot() {
  const [step, setStep] = useState(0);
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    interests: '',
    skills: '',
    goals: ''
  });
  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const steps = [
    { field: 'name', label: 'What\'s your name?', icon: User, placeholder: 'Enter your full name', type: 'text' },
    { field: 'age', label: 'How old are you?', icon: User, placeholder: 'Enter your age', type: 'number' },
    { field: 'interests', label: 'What are your interests?', icon: Lightbulb, placeholder: 'e.g., Technology, Art, Science, Business', type: 'textarea' },
    { field: 'skills', label: 'What are your key skills?', icon: Briefcase, placeholder: 'e.g., Programming, Communication, Design', type: 'textarea' },
    { field: 'goals', label: 'What are your career goals?', icon: Target, placeholder: 'Describe your aspirations and what you want to achieve', type: 'textarea' }
  ];

  const handleInputChange = (value) => {
    setFormData({ ...formData, [steps[step].field]: value });
  };

  const handleNext = () => {
    if (step < steps.length - 1) {
      setStep(step + 1);
    } else {
      handleSubmit();
    }
  };

  const handleBack = () => {
    if (step > 0) {
      setStep(step - 1);
    }
  };

  const handleSubmit = async () => {
    setLoading(true);
    setError(null);
    
    const url = 'https://api.worqhat.com/flows/trigger/04fb8506-0b79-44d3-97f8-6a69df98e5c9';
    const apiKey = 'wh_mheus8g8T1gs78vYYojuAUqYcqbyMGHt61twkpXSxb3QX';
    
    const payload = {
      name: formData.name,
      age: formData.age,
      interests: formData.interests,
      skills: formData.skills,
      goals: formData.goals
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Success:', data);
      setLoading(false);
      setSubmitted(true);
    } catch (error) {
      console.error('Error submitting form:', error);
      setLoading(false);
      setError(error.message);
      // Still show success page even if API fails (for demo purposes)
      // Remove the next line if you want to prevent submission on error
      setSubmitted(true);
    }
  };

  const handleRestart = () => {
    setStep(0);
    setFormData({
      name: '',
      age: '',
      interests: '',
      skills: '',
      goals: ''
    });
    setSubmitted(false);
  };

  const currentStep = steps[step];
  const progress = ((step + 1) / steps.length) * 100;
  const currentValue = formData[currentStep?.field] || '';
  const isValid = currentValue.toString().trim().length > 0;

  if (submitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-700 flex items-center justify-center p-4">
        <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 max-w-3xl w-full">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-green-100 rounded-full mb-4">
              <Sparkles className="w-10 h-10 text-green-600" />
            </div>
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              Thank You, {formData.name}!
            </h1>
            <p className="text-gray-600 text-lg">
              Your information has been submitted successfully.
            </p>
            {error && (
              <div className="mt-3 bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <p className="text-yellow-800 text-sm">
                  Note: API call encountered an issue, but your data was captured locally.
                </p>
              </div>
            )}
            <p className="text-gray-500 text-sm mt-2">
              You'll receive career recommendations once processed.
            </p>
          </div>

          <div className="bg-gray-50 rounded-xl p-6 mb-6">
            <h3 className="font-bold text-gray-800 mb-4 text-xl">Submitted Information</h3>
            <div className="space-y-3">
              <div className="flex items-start">
                <span className="font-semibold text-gray-700 w-32">Name:</span>
                <span className="text-gray-600">{formData.name}</span>
              </div>
              <div className="flex items-start">
                <span className="font-semibold text-gray-700 w-32">Age:</span>
                <span className="text-gray-600">{formData.age}</span>
              </div>
              <div className="flex items-start">
                <span className="font-semibold text-gray-700 w-32">Interests:</span>
                <span className="text-gray-600">{formData.interests}</span>
              </div>
              <div className="flex items-start">
                <span className="font-semibold text-gray-700 w-32">Skills:</span>
                <span className="text-gray-600">{formData.skills}</span>
              </div>
              <div className="flex items-start">
                <span className="font-semibold text-gray-700 w-32">Goals:</span>
                <span className="text-gray-600">{formData.goals}</span>
              </div>
            </div>
          </div>

          <button
            onClick={handleRestart}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-4 rounded-xl font-semibold hover:shadow-lg transition-all duration-300"
          >
            Start New Assessment
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-700 flex items-center justify-center p-4">
      <div className="bg-white rounded-3xl shadow-2xl p-8 md:p-12 max-w-2xl w-full">
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-3xl md:text-4xl font-bold text-gray-800 flex items-center gap-3">
              <Sparkles className="w-8 h-8 text-purple-600" />
              Career Bot
            </h1>
            <span className="text-sm font-semibold text-gray-500">
              {step + 1} / {steps.length}
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-purple-600 to-blue-600 h-2 rounded-full transition-all duration-500"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        <div className="mb-8">
          <div className="flex items-center gap-3 mb-6">
            <div className="bg-purple-100 p-3 rounded-full">
              {React.createElement(currentStep.icon, { className: "w-6 h-6 text-purple-600" })}
            </div>
            <h2 className="text-2xl font-bold text-gray-800">
              {currentStep.label}
            </h2>
          </div>

          {currentStep.type === 'textarea' ? (
            <textarea
              value={currentValue}
              onChange={(e) => handleInputChange(e.target.value)}
              placeholder={currentStep.placeholder}
              rows="5"
              className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none text-lg transition-all duration-300 resize-none"
              autoFocus
            />
          ) : (
            <input
              type={currentStep.type}
              value={currentValue}
              onChange={(e) => handleInputChange(e.target.value)}
              placeholder={currentStep.placeholder}
              className="w-full px-6 py-4 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none text-lg transition-all duration-300"
              autoFocus
            />
          )}
        </div>

        <div className="flex gap-4">
          {step > 0 && (
            <button
              onClick={handleBack}
              className="flex-1 bg-gray-200 text-gray-700 py-4 rounded-xl font-semibold hover:bg-gray-300 transition-all duration-300 flex items-center justify-center gap-2"
            >
              <ChevronLeft className="w-5 h-5" />
              Back
            </button>
          )}
          <button
            onClick={handleNext}
            disabled={!isValid || loading}
            className={`flex-1 py-4 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center gap-2 ${
              isValid && !loading
                ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:shadow-lg'
                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
            }`}
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                Submitting...
              </>
            ) : (
              <>
                {step === steps.length - 1 ? 'Submit' : 'Next'}
                <ChevronRight className="w-5 h-5" />
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
